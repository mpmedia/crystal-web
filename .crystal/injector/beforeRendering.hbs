{{#equals @key 'post'}}
form = new formulator Signup, req.body

verification = uuid.v4()

bluebird.try () ->
  if !form.isValid()
    throw new Error 'Validation failed.'
.then () ->
  db.models.User.findOne {
    where:
      email: form.data.email
  }
.then (user) ->
  if user
    throw new Error 'Email address in use. Please use another.'
  
  db.models.User.findOne {
    where:
      username: form.data.username
  }
.then (user) ->
  if user
    throw new Error 'Username is taken. Please try another.'
    
  db.models.User.create {
    email: form.data.email
    username: form.data.username
    verification: verification
  }
.then (user) ->
  avatar_hash = crypto.createHash('md5').update(req.body.email).digest 'hex'
  req.session.avatar = "http://www.gravatar.com/avatar/#{avatar_hash}"
  req.session.userId = user.dataValues.id
  return user.setPassword req.body.password
.then (data) ->
  ses = new aws.SES {
    apiVersion: '2012-10-17'
    region: 'us-east-1'
  }
  bluebird.promisifyAll ses
  to = ["#{req.body.username} <#{req.body.email}>"]
  from = 'Crystal <noreply@crystal.sh>'
  
  ses.sendEmailAsync {
    Source: from
    Destination:
      ToAddresses: to
    Message:
      Subject:
          Data: 'Welcome to Crystal!'
      Body:
        Text:
          Data: "Thank you for signing up! Please verify your account: http://crystal.sh/user/verify/#{verification}"
        Html:
          Data: "Thank you for signing up! Please verify your account: http://crystal.sh/user/verify/#{verification}"
  }
.then (data) ->
  res.redirect '/'
.catch (e) ->
  res.render 'signup', {
    error: e.message
    form: form
    styles: [
      'styles/page/signup.css'
    ]
    title: 'Crystal Sign Up'
  }
{{/equals}}